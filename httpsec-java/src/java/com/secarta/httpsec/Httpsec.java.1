package org.httpsec;

import java.security.KeyPairGenerator;
import java.security.cert.CertificateFactory;
import java.security.Signature;
import java.security.MessageDigest;
import java.security.KeyFactory;
import javax.crypto.Mac;
import javax.crypto.Cipher;
import javax.crypto.spec.DHParameterSpec;
import java.math.BigInteger;

public class Httpsec {

    public static final String
        SCHEME              = "httpsec/1.0",
        INITIALIZE          = SCHEME + " initialize",
        CONTINUE            = SCHEME + " continue",
        CHALLENGE           = SCHEME + " challenge",

        ID                  = "id",
        DH                  = "dh",
        CERTIFICATE         = "certificate",
        URL                 = "url",
        GROUP               = "group",
        NONCE               = "nonce",
        TOKEN               = "token",
        AUTH                = "auth",
        SIGNATURE           = "signature",
        COUNT               = "count",
        MAC                 = "mac",
        DIGEST              = "digest",
        
        PK_ALG              = "RSA",
        PK_CIPHER_ALG       = "RSA/NONE/OAEPWithSHA1AndMGF1Padding",
        HASH_ALG            = "SHA-256",
        HMAC_ALG            = "HmacSHA256",
        CIPHER_ALG          = "AES/CBC/PKCS5Padding", //
        STREAM_CIPHER_ALG   = "AES/CBC/PKCS5Padding",
        BLOCK_CIPHER_ALG    = "AES/ECB/NoPadding",
        CIPHER_KEY_ALG      = "AES",
        CERT_TYPE           = "X.509", //
        CERTIFICATE_TYPE    = "X.509",
        SIGNATURE_ALG       = "SHA256withRSAandMGF1",

        CONTENT_ENCODING    = "x-" + SCHEME + "-cipher",
        USER_CERT_MIME      = "application/x-x509-user-cert"
    ;


    public static final int
        PK_SIZE             = 2048,
        TOKEN_SIZE          = 8,
        NONCE_SIZE          = 32
    ;


    private static final BigInteger TWO = BigInteger.valueOf( 2 );
    
    public static final DHParameterSpec
        RFC3526_14 = new DHParameterSpec(
            new BigInteger( "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF", 16 ),
            TWO
        ),
        RFC3526_15 = new DHParameterSpec(
            new BigInteger( "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF", 16 ),
            TWO
        ),
        RFC3526_16 = new DHParameterSpec(
            new BigInteger( "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199FFFFFFFFFFFFFFFF", 16 ),
            TWO
        ),
        RFC3526_17 = new DHParameterSpec(
            new BigInteger( "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C93402849236C3FAB4D27C7026C1D4DCB2602646DEC9751E763DBA37BDF8FF9406AD9E530EE5DB382F413001AEB06A53ED9027D831179727B0865A8918DA3EDBEBCF9B14ED44CE6CBACED4BB1BDB7F1447E6CC254B332051512BD7AF426FB8F401378CD2BF5983CA01C64B92ECF032EA15D1721D03F482D7CE6E74FEF6D55E702F46980C82B5A84031900B1C9E59E7C97FBEC7E8F323A97A7E36CC88BE0F1D45B7FF585AC54BD407B22B4154AACC8F6D7EBF48E1D814CC5ED20F8037E0A79715EEF29BE32806A1D58BB7C5DA76F550AA3D8A1FBFF0EB19CCB1A313D55CDA56C9EC2EF29632387FE8D76E3C0468043E8F663F4860EE12BF2D5B0B7474D6E694F91E6DCC4024FFFFFFFFFFFFFFFF", 16 ),
            TWO
        ),
        RFC3526_18 = new DHParameterSpec(
            new BigInteger( "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C93402849236C3FAB4D27C7026C1D4DCB2602646DEC9751E763DBA37BDF8FF9406AD9E530EE5DB382F413001AEB06A53ED9027D831179727B0865A8918DA3EDBEBCF9B14ED44CE6CBACED4BB1BDB7F1447E6CC254B332051512BD7AF426FB8F401378CD2BF5983CA01C64B92ECF032EA15D1721D03F482D7CE6E74FEF6D55E702F46980C82B5A84031900B1C9E59E7C97FBEC7E8F323A97A7E36CC88BE0F1D45B7FF585AC54BD407B22B4154AACC8F6D7EBF48E1D814CC5ED20F8037E0A79715EEF29BE32806A1D58BB7C5DA76F550AA3D8A1FBFF0EB19CCB1A313D55CDA56C9EC2EF29632387FE8D76E3C0468043E8F663F4860EE12BF2D5B0B7474D6E694F91E6DBE115974A3926F12FEE5E438777CB6A932DF8CD8BEC4D073B931BA3BC832B68D9DD300741FA7BF8AFC47ED2576F6936BA424663AAB639C5AE4F5683423B4742BF1C978238F16CBE39D652DE3FDB8BEFC848AD922222E04A4037C0713EB57A81A23F0C73473FC646CEA306B4BCBC8862F8385DDFA9D4B7FA2C087E879683303ED5BDD3A062B3CF5B3A278A66D2A13F83F44F82DDF310EE074AB6A364597E899A0255DC164F31CC50846851DF9AB48195DED7EA1B1D510BD7EE74D73FAF36BC31ECFA268359046F4EB879F924009438B481C6CD7889A002ED5EE382BC9190DA6FC026E479558E4475677E9AA9E3050E2765694DFC81F56E880B96E7160C980DD98EDD3DFFFFFFFFFFFFFFFFF", 16 ),
            TWO
        );
    
    /*
    public static final String PROVIDER_ID = null;      // use whatever provider does the job.
    */
    
    //
    // comment this back in to use bouncycastle.
    
    public static final String PROVIDER_ID = "BC";    // use org.bouncycastle.jce.provider.BouncyCastleProvider
    
    static {
        if ( java.security.Security.getProvider( PROVIDER_ID ) == null ) {
            try {
                java.security.Security.insertProviderAt(
                    ( java.security.Provider )Class.forName(
                        "org.bouncycastle.jce.provider.BouncyCastleProvider"
                    ).newInstance(),
                    2
                );
            } catch ( Exception e ) {
                throw new IllegalStateException( "error loading bouncycastle provider: " + e );
            }
        }
    }
    //
    
    /**
     * Make sure you've got the right <code>java.security.MessageDigest</code>.
     */
    public static MessageDigest getMessageDigestInstance() {
        try {
            if ( PROVIDER_ID == null ) {
                return MessageDigest.getInstance( HASH_ALG );
            } else {
                return MessageDigest.getInstance( HASH_ALG, PROVIDER_ID );
            }
        } catch ( Exception e ) {
            throw new IllegalStateException( e.getMessage() );
        }
    }

    /**
     * Make sure you've got the right <code>java.security.Cipher</code> for public key operations.
     */
    public static Cipher getPKCipherInstance() {
        try { 
            if ( PROVIDER_ID == null ) {
                return Cipher.getInstance( PK_CIPHER_ALG );
            } else {
                return Cipher.getInstance( PK_CIPHER_ALG, PROVIDER_ID );
            }
        } catch ( Exception e ) {
            throw new IllegalStateException( e.getMessage() );
        }
    }

    /**
     * Make sure you've got the right <code>java.security.Cipher</code> for block cipher operations.
     */
    public static Cipher getBlockCipherInstance() {
        try {
            if ( PROVIDER_ID == null ) {
                return Cipher.getInstance( BLOCK_CIPHER_ALG );
            } else {
                return Cipher.getInstance( BLOCK_CIPHER_ALG, PROVIDER_ID );
            }
        } catch ( Exception e ) {
            throw new IllegalStateException( e.getMessage() );
        }
    }

    /**
     * Make sure you've got the right <code>java.security.Cipher</code> for stream cipher operations.
     */
    public static Cipher getStreamCipherInstance() {
        try {
            if ( PROVIDER_ID == null ) {
                return Cipher.getInstance( STREAM_CIPHER_ALG );
            } else {
                return Cipher.getInstance( STREAM_CIPHER_ALG, PROVIDER_ID );
            }
        } catch ( Exception e ) {
            throw new IllegalStateException( e.getMessage() );
        }
    }

    /**
     * Make sure you've got the right <code>java.security.KeyPairGenerator</code> for RSA keys.
     */
    public static KeyPairGenerator getRSAKeyPairGeneratorInstance() {
        try {
            if ( PROVIDER_ID == null ) {
                return KeyPairGenerator.getInstance( PK_ALG );
            } else {
                return KeyPairGenerator.getInstance( PK_ALG, PROVIDER_ID );
            }
        } catch ( Exception e ) {
            throw new IllegalStateException( e.getMessage() );
        }
    }

    /**
     * Make sure you've got the right <code>java.security.KeyPairGenerator</code> for Diffie-Hellman key pairs.
     */
    public static KeyPairGenerator getDHKeyPairGeneratorInstance() {
        try {
            if ( PROVIDER_ID == null ) {
                return KeyPairGenerator.getInstance( DH );
            } else {
                return KeyPairGenerator.getInstance( DH, PROVIDER_ID );
            }
        } catch ( Exception e ) {
            throw new IllegalStateException( e.getMessage() );
        }
    }

    /**
     * Make sure you've got the right <code>java.security.Signature</code>.
     */
    public static Signature getSignatureInstance() {
        try {
            if ( PROVIDER_ID == null ) {
                return Signature.getInstance( SIGNATURE_ALG );
            } else {
                return Signature.getInstance( SIGNATURE_ALG, PROVIDER_ID );
            }
        } catch ( Exception e ) {
            throw new IllegalStateException( e.getMessage() );
        }
    }

    /**
     * Make sure you've got the right <code>java.security.cert.CertificateFactory</code>.
     */
    public static CertificateFactory getCertificateFactoryInstance() {
        try {
            if ( PROVIDER_ID == null ) {
                return CertificateFactory.getInstance( CERTIFICATE_TYPE );
            } else {
                return CertificateFactory.getInstance( CERTIFICATE_TYPE, PROVIDER_ID );
            }
        } catch ( Exception e ) {
            throw new IllegalStateException( e.getMessage() );
        }
    }

    /**
     * Make sure you've got the right <code>javax.crypto.Mac</code> for hmac operations.
     */
    public static Mac getMacInstance() {
        try {
            if ( PROVIDER_ID == null ) {
                return Mac.getInstance( HMAC_ALG );
            } else {
                return Mac.getInstance( HMAC_ALG, PROVIDER_ID );
            }
        } catch ( Exception e ) {
            throw new IllegalStateException( e.getMessage() );
        }
    }

    /**
     * Make sure you've got the right <code>java.security.KeyFactory</code> for RSA keys.
     */
    public static KeyFactory getPKFactoryInstance() {
        try {
            if ( PROVIDER_ID == null ) {
                return KeyFactory.getInstance( PK_ALG );
            } else {
                return KeyFactory.getInstance( PK_ALG, PROVIDER_ID );
            }
        } catch ( Exception e ) {
            throw new IllegalStateException( e.getMessage() );
        }
    }
}
